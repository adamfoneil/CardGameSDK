@page "/Ready"
@using System.Text.Json
@using global::Games.Hearts
@using global::Games.FoxInTheForest
@attribute [Authorize]
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IServiceProvider Services
@inject NavigationManager Nav

<h3>Ready</h3>
<p>Use this to indicate your readiness to play a game.</p>

<RadzenDropDown @bind-Value="Game" Data="Dropdown.ForEnum<SupportedGames>()" ValueProperty="Value" TextProperty="Text" Change="ListPlayers" />

<div class="mt-3">
@if (_players.Any())
{
	<ul>
		@foreach (var p in _players)
		{
			<li>
				@p.User!.UserName
				<RadzenButton Visible="p.UserId == CurrentUser!.UserId" Icon="delete" ButtonStyle="ButtonStyle.Danger" class="ms-2" Click="RemoveMe" />
			</li>
		}
	</ul>

	<RadzenButton Text="Start" ButtonStyle="ButtonStyle.Primary" Click="StartGame" Disabled="!AllowStart" class="me-3" />

	<AuthorizeView Roles="Developers">
		<Authorized>
			<RadzenCheckBox @bind-Value="_testMode" Text="Test mode" Name="chkTestMode" />
			<RadzenLabel Text="Test mode" Component="chkTestMode" />
		</Authorized>
	</AuthorizeView>
}
else
{
	if (Game != null)
	{
		<p>No one is ready to play this game.</p>
	}
	else
	{
		<p>Please select a game.</p>	
	}
}
</div>

<RadzenButton Text="I'm Ready" Click="AddMyself" ButtonStyle="ButtonStyle.Secondary" Variant="Variant.Outlined" Disabled="Game is null || !AllowReady" class="mt-3" />

@code {
	private ReadyPlayer[] _players = [];	
	private bool _enoughPlayers = false;	
	private bool _testMode = false;
	private bool AllowStart => _enoughPlayers || _testMode;
	private bool AllowReady => !_players.Any(p => p.UserId == CurrentUser!.UserId);

	[CascadingParameter]
	private ApplicationUser? CurrentUser { get; set; }

	[Parameter]
	public SupportedGames? Game { get; set; }

	private async Task ListPlayers()
	{
		using var db = DbFactory.CreateDbContext();

		_players = await db.ReadyPlayers
			.Include(rp => rp.User)
			.Where(p => p.Game == Game)
			.OrderBy(p => p.User!.UserName)
			.ToArrayAsync();

		var factory = GetGameDispatcher();
		_enoughPlayers = _players.Length >= factory.MinPlayers && _players.Length <= factory.MaxPlayers;
	}

	private async Task AddMyself()
	{
		try
		{
			using var db = DbFactory.CreateDbContext();

			var player = new ReadyPlayer
			{
				Game = Game!.Value,
				UserId = CurrentUser!.UserId
			};

			db.ReadyPlayers.Add(player);
			await db.SaveChangesAsync();
			await ListPlayers();
		}
		catch (Exception exc)
		{
			await Dialogs.Alert(exc.Message, "Error");
		}
	}

	private async Task StartGame()
	{
		var gameFactory = GetGameDispatcher();

		var playerNames = _players.Select(p => p.User!.UserName!).ToList();

		if (_testMode)
		{
			int playersNeeded = (int)gameFactory.MinPlayers - playerNames.Count;
			playerNames.AddRange(gameFactory.DevModePlayerNames.Take(playersNeeded));
		}

		var state = gameFactory.CreateStateObject(_testMode, playerNames.ToArray());
		var json = JsonSerializer.Serialize(state);		

		var gameInstance = new GameInstance()
		{
			Game = Game!.Value,
			IsTestMode = _testMode,
			Url = "placeholder",
			State = json,
			Players = _players.Select(p => new GameInstancePlayer() { UserId = p.UserId }).ToList()
		};

		using var db = DbFactory.CreateDbContext();
		db.GameInstances.Add(gameInstance);
		await db.SaveChangesAsync();

		var url = gameFactory.GetUrl(gameInstance.Id);
		
		await db.GameInstances
			.Where(row => row.Id == gameInstance.Id)
			.ExecuteUpdateAsync(u => u.SetProperty(row => row.Url, url));

		await db.ReadyPlayers
			.Where(p => p.Game == Game)
			.ExecuteDeleteAsync();

		Nav.NavigateTo(url, forceLoad: true);
	}

	private IGameDispatcher GetGameDispatcher() =>
		Game switch
		{
			SupportedGames.FoxInTheForest => Services.GetRequiredService<FoxInTheForestGameFactory>(),
			SupportedGames.Hearts => Services.GetRequiredService<HeartsGameFactory>(),
			_ => throw new Exception("unknown game")
		};

	private async Task RemoveMe()
	{
		using var db = DbFactory.CreateDbContext();

		var player = await db.ReadyPlayers
			.Where(p => p.Game == Game && p.UserId == CurrentUser!.UserId)
			.ExecuteDeleteAsync();

		await ListPlayers();
	}
}
