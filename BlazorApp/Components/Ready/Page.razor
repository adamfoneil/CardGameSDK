@page "/Ready"
@using System.Text.Json
@using global::Games.Hearts
@using global::Games.FoxInTheForest
@attribute [Authorize]
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IServiceProvider Services
@inject NavigationManager Nav

<h3>Ready</h3>
<p>Use this to indicate your readiness to play a game.</p>

<RadzenDropDown @bind-Value="Game" Data="Dropdown.ForEnum<SupportedGames>()" ValueProperty="Value" TextProperty="Text" Change="ListPlayers" />

<div class="mt-3">
@if (_players.Any())
{
	<ul>
		@foreach (var p in _players)
		{
			<li>@p.User!.UserName</li>
		}
	</ul>

	<RadzenButton Text="Start" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Outlined" Click="StartGame" Disabled="!_allowStart" />

	<AuthorizeView Roles="Developers">
		<Authorized>
			<RadzenCheckBox @bind-Value="_devMode" Text="Dev mode" Name="chkDevMode" />
			<RadzenLabel Text="Dev mode" Component="chkDevMode" />
		</Authorized>
	</AuthorizeView>
}
else
{
	if (Game != null)
	{
		<p>No one is ready to play this game.</p>
	}
	else
	{
		<p>Please select a game.</p>	
	}
}
</div>

<RadzenButton Text="I'm Ready" Click="AddMyself" Disabled="Game is null" />

@code {
	private ReadyPlayer[] _players = [];	
	private bool _allowStart = false;
	private bool _devMode = false;

	[CascadingParameter]
	private ApplicationUser? CurrentUser { get; set; }

	[Parameter]
	public SupportedGames? Game { get; set; }

	private async Task ListPlayers()
	{
		using var db = DbFactory.CreateDbContext();

		_players = await db.ReadyPlayers
			.Include(rp => rp.User)
			.Where(p => p.Game == Game)
			.OrderBy(p => p.User!.UserName)
			.ToArrayAsync();

		var factory = GetGameDispatcher();
		_allowStart = _players.Length >= factory.MinPlayers && _players.Length <= factory.MaxPlayers;
	}

	private async Task AddMyself()
	{
		try
		{
			using var db = DbFactory.CreateDbContext();

			var player = new ReadyPlayer
			{
				Game = Game!.Value,
				UserId = CurrentUser!.UserId
			};

			db.ReadyPlayers.Add(player);
			await db.SaveChangesAsync();
			await ListPlayers();
		}
		catch (Exception exc)
		{
			await Dialogs.Alert(exc.Message, "Error");
		}
	}

	private async Task StartGame()
	{
		var gameFactory = GetGameDispatcher();

		var state = gameFactory.CreateStateObject(_devMode, _players.Select(p => p.User!.UserName!).ToArray());
		var json = JsonSerializer.Serialize(state);

		var gameInstance = new GameInstance()
		{
			Game = Game!.Value,
			State = json
		};

		using var db = DbFactory.CreateDbContext();
		db.GameInstances.Add(gameInstance);
		await db.SaveChangesAsync();
	}

	private IGameDispatcher GetGameDispatcher() =>
		Game switch
		{
			SupportedGames.FoxInTheForest => Services.GetRequiredService<FoxInTheForestGameFactory>(),
			SupportedGames.Hearts => Services.GetRequiredService<HeartsGameFactory>(),
			_ => throw new Exception("unknown game")
		};
	
}
