@page "/Hearts/{key}"
@using System.Text.Json
@using global::Games.Hearts
@attribute [Authorize]
@inject IHashids Hashids
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject HeartsGameFactory GameFactory
@inject EventRelay Events
@inject ILogger<Page> Logger
@implements IDisposable

@if (_game is null) return;
@if (CurrentUser is null) return;
@if (_state is null) return;

<h3>Hearts</h3>

<div class="d-flex align-items-center">
	<div class="text-muted">game # @_gameId</div>
	<RadzenBadge Text="Test Mode" Visible="_game.IsTestMode" class="ms-2" />
</div>

@if (_state.Phase == PlayPhase.Play)
{
	<div class="d-flex justify-content-center">	
		<div class="table-top">
			<div><!--placeholder upper left--></div>
			<div><CardPlay Playslot="_state.GetRelativePlayslot(_effectivePlayer, PlayerOrientation.Across)" CurrentPlayer="@_state.CurrentPlayer!.Name" /></div>
			<div><!--placeholder upper right--></div>

			<div><CardPlay Playslot="_state.GetRelativePlayslot(_effectivePlayer, PlayerOrientation.Left)" CurrentPlayer="@_state.CurrentPlayer!.Name" /></div>
			<div class="d-flex align-items-center justify-content-center"><SuitImage Suit="_state.LeadingSuit" Opacity="0.5m" /></div>
			<div><CardPlay Playslot="_state.GetRelativePlayslot(_effectivePlayer, PlayerOrientation.Right)" CurrentPlayer="@_state.CurrentPlayer!.Name" /></div>

			<div><!--placeholder lower left--></div>
			<div><CardPlay Playslot="_state.GetRelativePlayslot(_effectivePlayer, PlayerOrientation.Self)" CurrentPlayer="@_state.CurrentPlayer!.Name" /></div>
			<div><!--placeholder lower right--></div>
		</div>
	</div>
}

@if (CurrentUser is null) return;

@if (_state.Phase == PlayPhase.Pass)
{
	<div class="d-flex align-items-center">
		<div>Select 3 cards to pass</div>
		<div class="ms-2">@CardPassStatus()</div>
	</div>

	<AuthorizeView Roles="Developers">
		<Authorized>
			<hr class="mt-4" />
			<RadzenDropDown @bind-Value="_viewPlayer" Data="@_state.Players.Select(p => p.Name)" Placeholder="View Player" AllowClear="true" />
		</Authorized>
	</AuthorizeView>
}

<div class="d-flex justify-content-center mt-4">	
	<Hand 
		Cards="_state.PlayersByName[_effectivePlayer].Hand!"
		GameState="_state"
		CardPlayed="OnCardPlayed"
		Playable="_state.IsPlayable(_effectivePlayer)"
		PlayerName="@_effectivePlayer" />
</div>

<details>
	<summary>My Tricks</summary>
	<div class="d-flex justify-content-center">
		@foreach (var trick in _state.MyTricks(_effectivePlayer))
		{
			<div>
				@trick.Points pts
				<Card PlayingCard="trick.WinningCard" />
			</div>
		}
	</div>
</details>

<AuthorizeView Roles="Developers">
	<Authorized>
		@*todo: game state json view*@
	</Authorized>
</AuthorizeView>

@code {
	[Parameter]
	public string Key { get; set; } = default!;

	[CascadingParameter]
	public ApplicationUser? CurrentUser { get; set; }

	private int _gameId;
	private GameInstance? _game;
	private HeartsGameState? _state;
	private string? _viewPlayer;
	private string _effectivePlayer => 
		_state.Phase == PlayPhase.Pass ?
			_viewPlayer ?? CurrentUser?.UserName :
			_state.IsTestMode ?
				_state!.CurrentPlayer?.Name : // todo: if placeholder, use current user	 
				CurrentUser!.UserName;

	protected override async Task OnInitializedAsync()
	{
		Events.GameStateChanged += OnStateChange;

		_gameId = Hashids.DecodeSingle(Key);
		await LoadGameAsync();
	}

	private async void OnStateChange(int gameInstanceId, string toUser, string? topic = null, string? payload = null)
	{
		if (gameInstanceId != _gameId) return;
		if (toUser != _effectivePlayer) return;
		await LoadGameAsync();
		await InvokeAsync(StateHasChanged);
	}

	private async Task OnCardPlayed()
	{
		using var db = DbFactory.CreateDbContext();

		var json = JsonSerializer.Serialize(_state);

		await db.GameInstances
			.Where(g => g.Id == _gameId)
			.ExecuteUpdateAsync(u => u.SetProperty(p => p.State, json));

		StateHasChanged();

		await Events.GameStateChangedAsync(_gameId, _effectivePlayer);
	}

	private async Task LoadGameAsync()
	{
		using var db = DbFactory.CreateDbContext();
		_game = await db.GameInstances.FindAsync(_gameId) ?? throw new Exception("game not found");
		_state = JsonSerializer.Deserialize<HeartsGameState>(_game.State) ?? throw new Exception("couldn't deserialize");
		_state.OnFinishedAsync += OnRoundFinished;
	}

	private async Task OnRoundFinished()
	{
		using var db = DbFactory.CreateDbContext();

		// todo: check score and see if game is over

		var nextRound = GameFactory.Start(_game!.IsTestMode, _game!.Players.Select(p => p.User!.UserName!).ToArray());

		nextRound.PassDirection = _state!.PassDirection switch
		{
			PlayerOrientation.Left => PlayerOrientation.Right,
			PlayerOrientation.Right => PlayerOrientation.Across,
			PlayerOrientation.Across => PlayerOrientation.Self,
			_ => throw new Exception("unknown pass direction")
		};

		var json = JsonSerializer.Serialize(nextRound);

		await db.CompleteRoundAsync(_gameId, json);
	}

	private string CardPassStatus()
	{
		var passCount = _state!.Passes.Count(p => p.PlayerName.Equals(_effectivePlayer));
		var totalPassCount = _state!.Passes.Count;
		return $"{_effectivePlayer}: {passCount} / {HeartsGameState.PassCardsCount} passed / all players: {totalPassCount} / {HeartsGameState.PassCardsCount * _state.Players.Count}";
	}

	public void Dispose()
	{
		Events.GameStateChanged -= OnStateChange;
	}
}
