@page "/Hearts/{key}"
@using System.Text.Json
@using global::Games.Hearts
@attribute [Authorize]
@inject IHashids Hashids
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject HeartsGameFactory GameFactory
@inject EventRelay Events
@inject ILogger<Page> Logger
@inject NavigationManager Nav
@implements IDisposable

@if (_game is null) return;
@if (CurrentUser is null) return;
@if (_state is null) return;

<h3>Hearts</h3>

<div class="d-flex align-items-center">
	<div class="text-muted">game # @_gameId | round @(_game.CurrentRound)</div>
	<RadzenBadge Text="Test Mode" Visible="_game.IsTestMode" class="ms-2" />
</div>

@if (_game.IsFinished)
{
	
}
else if (_state.Phase == PlayPhase.Play)
{
	<div class="d-flex justify-content-center">	
		<div class="table-top">
			<div><!--placeholder upper left--></div>
			<div><CardPlay Playslot="_state.GetRelativePlayslot(_effectivePlayer, PlayerOrientation.Across)" CurrentPlayer="@_state.CurrentPlayer?.Name" /></div>
			<div><!--placeholder upper right--></div>

			<div><CardPlay Playslot="_state.GetRelativePlayslot(_effectivePlayer, PlayerOrientation.Left)" CurrentPlayer="@_state.CurrentPlayer?.Name" /></div>
			<div class="d-flex align-items-center justify-content-center"><SuitImage Suit="_state.LeadingSuit" Opacity="0.5m" /></div>
			<div><CardPlay Playslot="_state.GetRelativePlayslot(_effectivePlayer, PlayerOrientation.Right)" CurrentPlayer="@_state.CurrentPlayer?.Name" /></div>

			<div><!--placeholder lower left--></div>
			<div><CardPlay Playslot="_state.GetRelativePlayslot(_effectivePlayer, PlayerOrientation.Self)" CurrentPlayer="@_state.CurrentPlayer?.Name" /></div>
			<div><!--placeholder lower right--></div>
		</div>
	</div>
}

@if (CurrentUser is null) return;

@if (_state.Phase == PlayPhase.Pass)
{
	<div class="d-flex align-items-center">		
		<div class="ms-2">@CardPassStatus()</div>
	</div>

	<AuthorizeView Roles="Developers">
		<Authorized>
			<hr class="mt-4" />
			<RadzenDropDown @bind-Value="_viewPlayer" Data="@_state.Players.Select(p => p.Name)" Placeholder="View Player" AllowClear="true" />
		</Authorized>
	</AuthorizeView>
}

<div class="d-flex justify-content-center mt-4">	
	<Hand 
		Cards="_state.PlayersByName[_effectivePlayer].Hand!"
		GameState="_state"
		CardPlayed="OnCardPlayed"
		Playable="_state.IsPlayable(_effectivePlayer)"
		PlayerName="@_effectivePlayer" />	
</div>

@if (_state!.Phase == PlayPhase.Pass)
{
	<div class="d-flex justify-content-center mt-4">Passing cards:</div>
	<div class="d-flex justify-content-center">
		<Hand Cards="_state.MyPasses(_effectivePlayer)"
			  GameState="_state"
			  CardPlayed="OnCardPlayed"
			  Playable="true"
			  PlayerName="@_effectivePlayer" />
	</div>
}

<details>
	<summary>My Tricks - @(_state.MyTricks(_effectivePlayer).Sum(t => t.Points)) pts</summary>
	<div class="d-flex justify-content-center">
		@foreach (var trick in _state.MyTricks(_effectivePlayer))
		{
			<div>
				@trick.Points pts
				<Card PlayingCard="trick.WinningCard" />
			</div>
		}
	</div>
</details>

<details>
	<summary>Score</summary>
	<div class="d-flex justify-content-center">
		<Score AllScores="_allScores" />
	</div>
</details>

@if (_state.IsTestMode)
{
	<hr class="mt-4" />
	<div class="test-console">
		<StateView State="_state"/>


		<AuthorizeView Roles="Developers">
			<Authorized>
				<hr />
				<RadzenButton Text="Restart Round" Icon="restart_alt" Click="RestartRound" />
			</Authorized>
		</AuthorizeView>
	</div>
}

@code {
	[Parameter]
	public string Key { get; set; } = default!;

	[CascadingParameter]
	public ApplicationUser? CurrentUser { get; set; }

	private int _gameId;
	private GameInstance? _game;
	private string[] _allScores = [];
	private HeartsGameState? _state;
	private string? _viewPlayer;
	private string _effectivePlayer => 
		_state!.Phase == PlayPhase.Pass ?
			(_viewPlayer ?? CurrentUser?.UserName ?? "<no player>") :
			_state.IsTestMode ?
				(_state!.CurrentPlayer?.Name ?? "<no player>") : // todo: if placeholder, use current user	 
				CurrentUser!.UserName;

	protected override async Task OnInitializedAsync()
	{
		Events.GameStateChanged += OnStateChange;

		_gameId = Hashids.DecodeSingle(Key);
		await LoadGameAsync();
	}

	private async void OnStateChange(int gameInstanceId, string toUser, string? topic = null, string? payload = null)
	{
		if (gameInstanceId != _gameId) return;
		if (toUser != CurrentUser?.UserName) return;

		if (topic == EventMessage.GameEndedTopic)
		{
			Nav.NavigateTo("/", forceLoad: true);
			return;
		}

		await LoadGameAsync();
		await InvokeAsync(StateHasChanged);
	}

	private async Task OnCardPlayed()
	{
		ArgumentNullException.ThrowIfNull(_state, nameof(_state));

		using var db = DbFactory.CreateDbContext();

		var json = JsonSerializer.Serialize(_state);

		await db.GameInstances
			.Where(g => g.Id == _gameId)
			.ExecuteUpdateAsync(u => u.SetProperty(p => p.State, json));					

		if (_state.IsRoundFinished)
		{
			_state = await StartNewRoundAsync(db);
			// need to refresh the round number by reloading the game
			_game = await db.GameInstances.FindAsync(_gameId) ?? throw new Exception("game not found");
			await RefreshScoresAsync();
		}

		StateHasChanged();

		await Events.GameStateChangedAsync(_gameId, CurrentUser!.UserName!);
	}

	private async Task LoadGameAsync()
	{
		using var db = DbFactory.CreateDbContext();
		_game = await db.GameInstances.FindAsync(_gameId) ?? throw new Exception("game not found");

		await RefreshScoresAsync();

		_state = JsonSerializer.Deserialize<HeartsGameState>(_game.State!) ?? throw new Exception("couldn't deserialize");		
	}

	private async Task RefreshScoresAsync()
	{
		using var db = DbFactory.CreateDbContext();

		_allScores = await db.Rounds
			.Where(r => r.GameInstanceId == _gameId)
			.OrderBy(row => row.Number)
			.Select(r => r.Score)
			.ToArrayAsync();
	}

	private async Task<HeartsGameState> StartNewRoundAsync(ApplicationDbContext db)
	{
		var nextRound = GameFactory.StartNewRound(_state!);

		var playNext = await db.PlayNextRoundAsync(_gameId, 
			JsonSerializer.Serialize(nextRound), JsonSerializer.Serialize(_state!.Score),
			GameFactory);

		if (!playNext)
		{
			// game is finished
			await Events.GameStateChangedAsync(_gameId, CurrentUser!.UserName!, EventMessage.GameEndedTopic);
			Nav.NavigateTo("/", forceLoad: true);
			return default!;
		}

		await Events.GameStateChangedAsync(_gameId, CurrentUser!.UserName!, EventMessage.RoundEndedTopic);
		return nextRound;		
	}

	private string CardPassStatus()
	{
		var passCount = _state!.Passes.Count(p => p.PlayerName.Equals(_effectivePlayer));
		var totalPassCount = _state!.Passes.Count;
		var recipient = _state!.PassingRecipient(_effectivePlayer);
		return $"{_effectivePlayer} passing to {recipient}: {passCount} | {HeartsGameState.PassCardsCount} passed | all players: {totalPassCount} / {HeartsGameState.PassCardsCount * _state.Players.Count}";
	}

	private async Task RestartRound()
	{
		using var db = DbFactory.CreateDbContext();
		_state = await StartNewRoundAsync(db);
		StateHasChanged();
	}

	public void Dispose()
	{
		Events.GameStateChanged -= OnStateChange;		
	}
}
