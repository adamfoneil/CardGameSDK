@page "/Hearts/{key}"
@using System.Text.Json
@using global::Games.Hearts
@attribute [Authorize]
@inject IHashids Hashids
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject StateContainer State
@implements IDisposable

@if (_game is null) return;
@if (CurrentUser is null) return;
@if (_state is null) return;

<h3>Hearts</h3>

<div class="d-flex align-items-center">
	<div class="text-muted">game # @_gameId</div>
	<RadzenBadge Text="Test Mode" Visible="_game.IsTestMode" class="ms-2" />
</div>

<div class="d-flex justify-content-center">
	<div class="table-top">
		<div><!--placeholder upper left--></div>
		<div><CardPlay Playslot="_state.GetRelativePlayslot(_effectivePlayer, PlayerOrientation.Across)" CurrentPlayer="@_state.CurrentPlayer!.Name" /></div>
		<div><!--placeholder upper right--></div>

		<div><CardPlay Playslot="_state.GetRelativePlayslot(_effectivePlayer, PlayerOrientation.Left)" CurrentPlayer="@_state.CurrentPlayer!.Name" /></div>
		<div class="d-flex align-items-center justify-content-center"><SuitImage Suit="_state.LeadingSuit" Opacity="0.5m" /></div>
		<div><CardPlay Playslot="_state.GetRelativePlayslot(_effectivePlayer, PlayerOrientation.Right)" CurrentPlayer="@_state.CurrentPlayer!.Name" /></div>

		<div><!--placeholder lower left--></div>
		<div><CardPlay Playslot="_state.GetRelativePlayslot(_effectivePlayer, PlayerOrientation.Self)" CurrentPlayer="@_state.CurrentPlayer!.Name" /></div>
		<div><!--placeholder lower right--></div>
	</div>
</div>

@if (CurrentUser is null) return;

<div class="d-flex justify-content-center mt-4">
	<Hand 
		Cards="_state.PlayersByName[_effectivePlayer].Hand!" 
		GameState="_state" 
		CardPlayed="OnCardPlayed"
		Playable="_state.IsPlayable(_effectivePlayer)"
		PlayerName="@_effectivePlayer"/>
</div>

<details>
	<summary>My Tricks</summary>
	<div class="d-flex justify-content-center">
		@foreach (var trick in _state.MyTricks(_effectivePlayer))
		{
			<div>
				@trick.Points pts
				<Card PlayingCard="trick.WinningCard" />
			</div>
		}
	</div>
</details>	

@code {
	[Parameter]
	public string Key { get; set; } = default!;

	[CascadingParameter]
	public ApplicationUser? CurrentUser { get; set; }

	private int _gameId;
	private GameInstance? _game;
	private HeartsGameState? _state;
	private string _effectivePlayer => _state.IsTestMode ?
		_state.CurrentPlayer.Name :
		CurrentUser.UserName;	

	protected override async Task OnInitializedAsync()
	{
		State.OnChangeAsync += OnStateChange;

		_gameId = Hashids.DecodeSingle(Key);
		await LoadGameAsync();
	}

	private async Task OnStateChange(string userName)
	{
		StateHasChanged();
		if (userName == _effectivePlayer) return;
		await LoadGameAsync();		
	}

	private async Task OnCardPlayed()
	{
		using var db = DbFactory.CreateDbContext();

		var json = JsonSerializer.Serialize(_state);

		await db.GameInstances
			.Where(g => g.Id == _gameId)
			.ExecuteUpdateAsync(u => u.SetProperty(p => p.State, json));

		StateHasChanged();

		if (_state!.Phase == PlayPhase.Play)
		{
			State.NotifyStateChanged(_effectivePlayer);
		}		
	}

	private async Task LoadGameAsync()
	{
		using var db = DbFactory.CreateDbContext();
		_game = await db.GameInstances.FindAsync(_gameId) ?? throw new Exception("game not found");
		_state = JsonSerializer.Deserialize<HeartsGameState>(_game.State);
	}

	public void Dispose()
	{
		State.OnChangeAsync -= OnStateChange;
	}
}
