@using global::Games.Hearts
@inject ILogger<Hand> Logger

<div class="d-flex align-items-center">
	@foreach (var suit in Cards.GroupBy(c => c.Suit).OrderBy(grp => grp.First().Rank))
	{
		foreach (var card in suit.OrderBy(c => c.Rank))
		{
			<Card PlayingCard="card" OnClick="OnCardPlayed" Playable="Playable" />
		}		
	}
</div>

@code {
	[Parameter]
	public IEnumerable<PlayingCard> Cards { get; set; } = [];

	[Parameter, EditorRequired]
	public HeartsGameState GameState { get; set; } = default!;

	[Parameter, EditorRequired]
	public EventCallback<PlayingCard> CardPlayed { get; set; }

	[Parameter]
	public bool Playable { get; set; }

	[Parameter, EditorRequired]
	public string PlayerName { get; set; } = default!;

	private async Task OnCardPlayed(PlayingCard card)
	{
		try
		{
			switch (GameState.Phase)
			{
				case PlayPhase.Pass:
					GameState.PassCard(PlayerName, card);					
					break;

				case PlayPhase.Play:
					GameState.PlayCard(PlayerName, card);					
					break;
				default:
					throw new InvalidOperationException("Invalid game phase");
			}

			await CardPlayed.InvokeAsync(card);
		}
		catch (Exception exc)
		{
			await Dialogs.Alert(exc.Message);
		}
	}
}
