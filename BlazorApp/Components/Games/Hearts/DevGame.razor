@attribute [Authorize(Roles = "Developers")]
@page "/Hearts/DevGame"
@using global::Games.Hearts
@inject HeartsGameFactory HeartsGame

<h3>Hearts - DevMode</h3>

<RadzenButton Text="New Game" Click="NewGame" />

@if (_gameState != null)
{
	<div class="grid">
		<div class="pe-3">
			@foreach (var player in _gameState.Players)
			{
				<hr />
				<h4 style="@CurrentPlayerStyle(player.Name)" class="p-2 rounded-2">@player.Name</h4>
				<div class="d-flex justify-content-between">
					<Hand Cards="player.Hand" GameState="_gameState" CardPlayed="OnCardPlayed" />
					<Card PlayingCard="_gameState.GetCurrentCard(player.Name)" />
				</div>
			}
		</div>
		<div>
			<div>hearts broken: @_gameState.IsHeartsBroken</div>
			<ul>
				@foreach (var trick in _gameState.Tricks)
				{
					<li>
						<div>@trick.Winner - @trick.WinningCard.ToString()</div>
					</li>
				}
			</ul>			
		</div>
	</div>
	
}

@code {
	private static string[] _playerNames = ["Alice", "Bob", "Charlie", "David"];

	private HeartsGameState? _gameState;

	private void NewGame()
	{
		_gameState = HeartsGame.Start(true, _playerNames);		
	}

	private string CurrentPlayerStyle(string playerName) => 
		_gameState?.CurrentPlayer?.Name.Equals(playerName, StringComparison.OrdinalIgnoreCase) ?? false ? 
			"background-color: lightgreen" : 
			"auto";

	private void OnCardPlayed(PlayingCard card)
	{
		StateHasChanged();
	}
}
