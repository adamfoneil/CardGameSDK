@page "/"
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IHashids Hashids

<PageTitle>Cardplace</PageTitle>

<h1>Cardplace</h1>
<p>For online card games and <a href="https://github.com/adamfoneil/CardGameSDK">card game development</a>.</p>

<AuthorizeView>
	<Authorized>
		<h2>My Games</h2>
		<ul>
			@foreach (var game in _activeGames)
			{
				<li>
					<a href="@game.Url">@game.Game # @game.Id, round @(game.CurrentRound) - @PlayerList(game)</a>
					<RadzenBadge Text="Test Mode" Visible="game.IsTestMode" class="ms-2" />
				</li>
			}
		</ul>
	</Authorized>
</AuthorizeView>

@code {
	private List<GameInstance> _activeGames = [];

	[CascadingParameter]
	private ApplicationUser? CurrentUser { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		if (CurrentUser is null) return;

		using var db = DbFactory.CreateDbContext();

		_activeGames = await db.GameInstances
			.Include(g => g.Players)
			.ThenInclude(p => p.User)
			.Where(g => g.Players.Any(p => p.UserId == CurrentUser!.UserId) && g.FinishedAtUtc == null)
			.AsSplitQuery()
			.ToListAsync();
	}

	private string PlayerList(GameInstance gameInstance) => string.Join(", ", gameInstance.Players.Select(p => p.User!.UserName));
}